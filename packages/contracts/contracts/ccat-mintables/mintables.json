{
  "contract_name": "mintables",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "add_traits"
        ],
        "properties": {
          "add_traits": {
            "type": "object",
            "required": [
              "new_traits"
            ],
            "properties": {
              "new_traits": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Trait"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_traits"
        ],
        "properties": {
          "remove_traits": {
            "type": "object",
            "required": [
              "ids"
            ],
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_characters"
        ],
        "properties": {
          "add_characters": {
            "type": "object",
            "required": [
              "new_characters"
            ],
            "properties": {
              "new_characters": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Character"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_characters"
        ],
        "properties": {
          "remove_characters": {
            "type": "object",
            "required": [
              "ids"
            ],
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_trait_bundles"
        ],
        "properties": {
          "add_trait_bundles": {
            "type": "object",
            "required": [
              "new_trait_bundles"
            ],
            "properties": {
              "new_trait_bundles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TraitBundle"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_trait_bundles"
        ],
        "properties": {
          "remove_trait_bundles": {
            "type": "object",
            "required": [
              "ids"
            ],
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_character_bundles"
        ],
        "properties": {
          "add_character_bundles": {
            "type": "object",
            "required": [
              "new_character_bundles"
            ],
            "properties": {
              "new_character_bundles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CharacterBundle"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_character_bundles"
        ],
        "properties": {
          "remove_character_bundles": {
            "type": "object",
            "required": [
              "ids"
            ],
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_trait_lootboxes"
        ],
        "properties": {
          "add_trait_lootboxes": {
            "type": "object",
            "required": [
              "new_trait_lootboxes"
            ],
            "properties": {
              "new_trait_lootboxes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TraitLootbox"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_trait_lootboxes"
        ],
        "properties": {
          "remove_trait_lootboxes": {
            "type": "object",
            "required": [
              "ids"
            ],
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_character_lootboxes"
        ],
        "properties": {
          "add_character_lootboxes": {
            "type": "object",
            "required": [
              "new_character_lootboxes"
            ],
            "properties": {
              "new_character_lootboxes": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CharacterLootbox"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_character_lootboxes"
        ],
        "properties": {
          "remove_character_lootboxes": {
            "type": "object",
            "required": [
              "ids"
            ],
            "properties": {
              "ids": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Character": {
        "type": "object",
        "required": [
          "id",
          "locked",
          "mint_price",
          "rarity"
        ],
        "properties": {
          "ears": {
            "type": [
              "string",
              "null"
            ]
          },
          "eyes": {
            "type": [
              "string",
              "null"
            ]
          },
          "fur_color": {
            "type": [
              "string",
              "null"
            ]
          },
          "fur_type": {
            "type": [
              "string",
              "null"
            ]
          },
          "id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "locked": {
            "type": "boolean"
          },
          "mint_price": {
            "$ref": "#/definitions/Coin"
          },
          "mouth": {
            "type": [
              "string",
              "null"
            ]
          },
          "rarity": {
            "type": "string"
          },
          "tail_shape": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "CharacterBundle": {
        "type": "object",
        "required": [
          "characters",
          "id",
          "mint_price"
        ],
        "properties": {
          "characters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Character"
            }
          },
          "id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "mint_price": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "CharacterLootbox": {
        "type": "object",
        "required": [
          "characters",
          "id",
          "mint_price",
          "possibilities"
        ],
        "properties": {
          "characters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Character"
            }
          },
          "id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "mint_price": {
            "$ref": "#/definitions/Coin"
          },
          "possibilities": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Trait": {
        "type": "object",
        "required": [
          "id",
          "mint_price",
          "trait_rarity",
          "trait_type",
          "trait_value"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "mint_price": {
            "$ref": "#/definitions/Coin"
          },
          "trait_rarity": {
            "type": "string"
          },
          "trait_type": {
            "type": "string"
          },
          "trait_value": {
            "type": "string"
          }
        }
      },
      "TraitBundle": {
        "type": "object",
        "required": [
          "id",
          "mint_price",
          "traits"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "mint_price": {
            "$ref": "#/definitions/Coin"
          },
          "traits": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Trait"
            }
          }
        }
      },
      "TraitLootbox": {
        "type": "object",
        "required": [
          "id",
          "mint_price",
          "possibilities",
          "traits"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "mint_price": {
            "$ref": "#/definitions/Coin"
          },
          "possibilities": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "traits": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Trait"
            }
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "traits"
        ],
        "properties": {
          "traits": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "characters"
        ],
        "properties": {
          "characters": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "trait_bundles"
        ],
        "properties": {
          "trait_bundles": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "character_bundles"
        ],
        "properties": {
          "character_bundles": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "trait_lootboxes"
        ],
        "properties": {
          "trait_lootboxes": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "character_lootboxes"
        ],
        "properties": {
          "character_lootboxes": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "character_bundles": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CharacterBundlesResp",
      "type": "object",
      "required": [
        "bundles"
      ],
      "properties": {
        "bundles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacterBundle"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Character": {
          "type": "object",
          "required": [
            "id",
            "locked",
            "mint_price",
            "rarity"
          ],
          "properties": {
            "ears": {
              "type": [
                "string",
                "null"
              ]
            },
            "eyes": {
              "type": [
                "string",
                "null"
              ]
            },
            "fur_color": {
              "type": [
                "string",
                "null"
              ]
            },
            "fur_type": {
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "locked": {
              "type": "boolean"
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "mouth": {
              "type": [
                "string",
                "null"
              ]
            },
            "rarity": {
              "type": "string"
            },
            "tail_shape": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "CharacterBundle": {
          "type": "object",
          "required": [
            "characters",
            "id",
            "mint_price"
          ],
          "properties": {
            "characters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Character"
              }
            },
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            }
          }
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "character_lootboxes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CharacterLootboxesResp",
      "type": "object",
      "required": [
        "lootboxes"
      ],
      "properties": {
        "lootboxes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacterLootbox"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Character": {
          "type": "object",
          "required": [
            "id",
            "locked",
            "mint_price",
            "rarity"
          ],
          "properties": {
            "ears": {
              "type": [
                "string",
                "null"
              ]
            },
            "eyes": {
              "type": [
                "string",
                "null"
              ]
            },
            "fur_color": {
              "type": [
                "string",
                "null"
              ]
            },
            "fur_type": {
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "locked": {
              "type": "boolean"
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "mouth": {
              "type": [
                "string",
                "null"
              ]
            },
            "rarity": {
              "type": "string"
            },
            "tail_shape": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "CharacterLootbox": {
          "type": "object",
          "required": [
            "characters",
            "id",
            "mint_price",
            "possibilities"
          ],
          "properties": {
            "characters": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Character"
              }
            },
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "possibilities": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            }
          }
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "characters": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CharactersResp",
      "type": "object",
      "required": [
        "characters"
      ],
      "properties": {
        "characters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Character"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Character": {
          "type": "object",
          "required": [
            "id",
            "locked",
            "mint_price",
            "rarity"
          ],
          "properties": {
            "ears": {
              "type": [
                "string",
                "null"
              ]
            },
            "eyes": {
              "type": [
                "string",
                "null"
              ]
            },
            "fur_color": {
              "type": [
                "string",
                "null"
              ]
            },
            "fur_type": {
              "type": [
                "string",
                "null"
              ]
            },
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "locked": {
              "type": "boolean"
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "mouth": {
              "type": [
                "string",
                "null"
              ]
            },
            "rarity": {
              "type": "string"
            },
            "tail_shape": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "trait_bundles": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TraitBundlesResp",
      "type": "object",
      "required": [
        "bundles"
      ],
      "properties": {
        "bundles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TraitBundle"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Trait": {
          "type": "object",
          "required": [
            "id",
            "mint_price",
            "trait_rarity",
            "trait_type",
            "trait_value"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "trait_rarity": {
              "type": "string"
            },
            "trait_type": {
              "type": "string"
            },
            "trait_value": {
              "type": "string"
            }
          }
        },
        "TraitBundle": {
          "type": "object",
          "required": [
            "id",
            "mint_price",
            "traits"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "traits": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trait"
              }
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "trait_lootboxes": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TraitLootboxesResp",
      "type": "object",
      "required": [
        "lootboxes"
      ],
      "properties": {
        "lootboxes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TraitLootbox"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Trait": {
          "type": "object",
          "required": [
            "id",
            "mint_price",
            "trait_rarity",
            "trait_type",
            "trait_value"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "trait_rarity": {
              "type": "string"
            },
            "trait_type": {
              "type": "string"
            },
            "trait_value": {
              "type": "string"
            }
          }
        },
        "TraitLootbox": {
          "type": "object",
          "required": [
            "id",
            "mint_price",
            "possibilities",
            "traits"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "possibilities": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            "traits": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trait"
              }
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "traits": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TraitsResp",
      "type": "object",
      "required": [
        "traits"
      ],
      "properties": {
        "traits": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Trait"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Trait": {
          "type": "object",
          "required": [
            "id",
            "mint_price",
            "trait_rarity",
            "trait_type",
            "trait_value"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "mint_price": {
              "$ref": "#/definitions/Coin"
            },
            "trait_rarity": {
              "type": "string"
            },
            "trait_type": {
              "type": "string"
            },
            "trait_value": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}
