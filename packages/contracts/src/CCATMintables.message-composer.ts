/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Uint128, Trait, Coin, Character, TraitBundle, CharacterBundle, TraitLootbox, CharacterLootbox, QueryMsg, CharacterBundlesResp, CharacterLootboxesResp, CharactersResp, TraitBundlesResp, TraitLootboxesResp, TraitsResp } from "./CCATMintables.types";
export interface CCATMintablesMessage {
  contractAddress: string;
  sender: string;
  addTraits: ({
    newTraits
  }: {
    newTraits: Trait[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeTraits: ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addCharacters: ({
    newCharacters
  }: {
    newCharacters: Character[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCharacters: ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addTraitBundles: ({
    newTraitBundles
  }: {
    newTraitBundles: TraitBundle[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeTraitBundles: ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addCharacterBundles: ({
    newCharacterBundles
  }: {
    newCharacterBundles: CharacterBundle[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCharacterBundles: ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addTraitLootboxes: ({
    newTraitLootboxes
  }: {
    newTraitLootboxes: TraitLootbox[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeTraitLootboxes: ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addCharacterLootboxes: ({
    newCharacterLootboxes
  }: {
    newCharacterLootboxes: CharacterLootbox[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeCharacterLootboxes: ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CCATMintablesMessageComposer implements CCATMintablesMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addTraits = this.addTraits.bind(this);
    this.removeTraits = this.removeTraits.bind(this);
    this.addCharacters = this.addCharacters.bind(this);
    this.removeCharacters = this.removeCharacters.bind(this);
    this.addTraitBundles = this.addTraitBundles.bind(this);
    this.removeTraitBundles = this.removeTraitBundles.bind(this);
    this.addCharacterBundles = this.addCharacterBundles.bind(this);
    this.removeCharacterBundles = this.removeCharacterBundles.bind(this);
    this.addTraitLootboxes = this.addTraitLootboxes.bind(this);
    this.removeTraitLootboxes = this.removeTraitLootboxes.bind(this);
    this.addCharacterLootboxes = this.addCharacterLootboxes.bind(this);
    this.removeCharacterLootboxes = this.removeCharacterLootboxes.bind(this);
  }

  addTraits = ({
    newTraits
  }: {
    newTraits: Trait[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_traits: {
            new_traits: newTraits
          }
        })),
        funds: _funds
      })
    };
  };
  removeTraits = ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_traits: {
            ids
          }
        })),
        funds: _funds
      })
    };
  };
  addCharacters = ({
    newCharacters
  }: {
    newCharacters: Character[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_characters: {
            new_characters: newCharacters
          }
        })),
        funds: _funds
      })
    };
  };
  removeCharacters = ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_characters: {
            ids
          }
        })),
        funds: _funds
      })
    };
  };
  addTraitBundles = ({
    newTraitBundles
  }: {
    newTraitBundles: TraitBundle[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_trait_bundles: {
            new_trait_bundles: newTraitBundles
          }
        })),
        funds: _funds
      })
    };
  };
  removeTraitBundles = ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_trait_bundles: {
            ids
          }
        })),
        funds: _funds
      })
    };
  };
  addCharacterBundles = ({
    newCharacterBundles
  }: {
    newCharacterBundles: CharacterBundle[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_character_bundles: {
            new_character_bundles: newCharacterBundles
          }
        })),
        funds: _funds
      })
    };
  };
  removeCharacterBundles = ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_character_bundles: {
            ids
          }
        })),
        funds: _funds
      })
    };
  };
  addTraitLootboxes = ({
    newTraitLootboxes
  }: {
    newTraitLootboxes: TraitLootbox[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_trait_lootboxes: {
            new_trait_lootboxes: newTraitLootboxes
          }
        })),
        funds: _funds
      })
    };
  };
  removeTraitLootboxes = ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_trait_lootboxes: {
            ids
          }
        })),
        funds: _funds
      })
    };
  };
  addCharacterLootboxes = ({
    newCharacterLootboxes
  }: {
    newCharacterLootboxes: CharacterLootbox[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_character_lootboxes: {
            new_character_lootboxes: newCharacterLootboxes
          }
        })),
        funds: _funds
      })
    };
  };
  removeCharacterLootboxes = ({
    ids
  }: {
    ids: number[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_character_lootboxes: {
            ids
          }
        })),
        funds: _funds
      })
    };
  };
}