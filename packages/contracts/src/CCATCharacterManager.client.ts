/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Decimal, Uint128, Addr, InstantiateMsg, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, Empty, CharacterManagerParams, Coin, ExecuteMsg, Action, Expiration, Timestamp, Uint64, Metadata, UpdateCharacterManagerParamsMsg, QueryMsg, AllowedCollectionCodeIdResponse, CharacterManagerConfigResponseForEmpty, CharacterManagerConfigForEmpty } from "./CCATCharacterManager.types";
export interface CCATCharacterManagerReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<CharacterManagerConfigResponseForEmpty>;
  allowedCollectionCodeId: () => Promise<AllowedCollectionCodeIdResponse>;
}
export class CCATCharacterManagerQueryClient implements CCATCharacterManagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.allowedCollectionCodeId = this.allowedCollectionCodeId.bind(this);
  }

  config = async (): Promise<CharacterManagerConfigResponseForEmpty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  allowedCollectionCodeId = async (): Promise<AllowedCollectionCodeIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      allowed_collection_code_id: {}
    });
  };
}
export interface CCATCharacterManagerInterface extends CCATCharacterManagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mint: ({
    tokenInfo
  }: {
    tokenInfo: Metadata;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintTo: ({
    receiver,
    tokenInfo
  }: {
    receiver: string;
    tokenInfo: Metadata;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintBundle: ({
    bundleId,
    receiver
  }: {
    bundleId: number;
    receiver?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  openLootbox: ({
    lootboxId,
    receiver
  }: {
    lootboxId: number;
    receiver?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeName: ({
    newName,
    tokenId
  }: {
    newName: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  modifyCharacter: ({
    tokenId,
    traitIds
  }: {
    tokenId: string;
    traitIds: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  lockCharacter: ({
    tokenId
  }: {
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    newConfig
  }: {
    newConfig: UpdateCharacterManagerParamsMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CCATCharacterManagerClient extends CCATCharacterManagerQueryClient implements CCATCharacterManagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.mintTo = this.mintTo.bind(this);
    this.mintBundle = this.mintBundle.bind(this);
    this.openLootbox = this.openLootbox.bind(this);
    this.changeName = this.changeName.bind(this);
    this.modifyCharacter = this.modifyCharacter.bind(this);
    this.lockCharacter = this.lockCharacter.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  mint = async ({
    tokenInfo
  }: {
    tokenInfo: Metadata;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        token_info: tokenInfo
      }
    }, fee, memo, _funds);
  };
  mintTo = async ({
    receiver,
    tokenInfo
  }: {
    receiver: string;
    tokenInfo: Metadata;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_to: {
        receiver,
        token_info: tokenInfo
      }
    }, fee, memo, _funds);
  };
  mintBundle = async ({
    bundleId,
    receiver
  }: {
    bundleId: number;
    receiver?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_bundle: {
        bundle_id: bundleId,
        receiver
      }
    }, fee, memo, _funds);
  };
  openLootbox = async ({
    lootboxId,
    receiver
  }: {
    lootboxId: number;
    receiver?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      open_lootbox: {
        lootbox_id: lootboxId,
        receiver
      }
    }, fee, memo, _funds);
  };
  changeName = async ({
    newName,
    tokenId
  }: {
    newName: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_name: {
        new_name: newName,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  modifyCharacter = async ({
    tokenId,
    traitIds
  }: {
    tokenId: string;
    traitIds: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      modify_character: {
        token_id: tokenId,
        trait_ids: traitIds
      }
    }, fee, memo, _funds);
  };
  lockCharacter = async ({
    tokenId
  }: {
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock_character: {
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    newConfig
  }: {
    newConfig: UpdateCharacterManagerParamsMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_config: newConfig
      }
    }, fee, memo, _funds);
  };
  updateOwnership = async (action: Action, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee, memo, _funds);
  };
}