/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, Uint128, Addr, InstantiateMsg, CollectionParams, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, Empty, CharacterManagerParams, Coin, ExecuteMsg, Action, Expiration, Timestamp, Uint64, Metadata, UpdateCharacterManagerParamsMsg, QueryMsg, AllowedCollectionCodeIdResponse, CharacterManagerConfigResponseForEmpty, CharacterManagerConfigForEmpty } from "./CCATCharacterManager.types";
export interface CCATCharacterManagerMessage {
  contractAddress: string;
  sender: string;
  mint: ({
    tokenInfo
  }: {
    tokenInfo: Metadata;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mintTo: ({
    receiver,
    tokenInfo
  }: {
    receiver: string;
    tokenInfo: Metadata;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  mintBundle: ({
    bundleId,
    receiver
  }: {
    bundleId: number;
    receiver?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  openLootbox: ({
    lootboxId,
    receiver
  }: {
    lootboxId: number;
    receiver?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  changeName: ({
    newName,
    tokenId
  }: {
    newName: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  modifyCharacter: ({
    tokenId,
    traitIds
  }: {
    tokenId: string;
    traitIds: string[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  lockCharacter: ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    newConfig
  }: {
    newConfig: UpdateCharacterManagerParamsMsg;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateOwnership: (action: Action, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CCATCharacterManagerMessageComposer implements CCATCharacterManagerMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mint = this.mint.bind(this);
    this.mintTo = this.mintTo.bind(this);
    this.mintBundle = this.mintBundle.bind(this);
    this.openLootbox = this.openLootbox.bind(this);
    this.changeName = this.changeName.bind(this);
    this.modifyCharacter = this.modifyCharacter.bind(this);
    this.lockCharacter = this.lockCharacter.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  mint = ({
    tokenInfo
  }: {
    tokenInfo: Metadata;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint: {
            token_info: tokenInfo
          }
        })),
        funds: _funds
      })
    };
  };
  mintTo = ({
    receiver,
    tokenInfo
  }: {
    receiver: string;
    tokenInfo: Metadata;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint_to: {
            receiver,
            token_info: tokenInfo
          }
        })),
        funds: _funds
      })
    };
  };
  mintBundle = ({
    bundleId,
    receiver
  }: {
    bundleId: number;
    receiver?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          mint_bundle: {
            bundle_id: bundleId,
            receiver
          }
        })),
        funds: _funds
      })
    };
  };
  openLootbox = ({
    lootboxId,
    receiver
  }: {
    lootboxId: number;
    receiver?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          open_lootbox: {
            lootbox_id: lootboxId,
            receiver
          }
        })),
        funds: _funds
      })
    };
  };
  changeName = ({
    newName,
    tokenId
  }: {
    newName: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          change_name: {
            new_name: newName,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  modifyCharacter = ({
    tokenId,
    traitIds
  }: {
    tokenId: string;
    traitIds: string[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          modify_character: {
            token_id: tokenId,
            trait_ids: traitIds
          }
        })),
        funds: _funds
      })
    };
  };
  lockCharacter = ({
    tokenId
  }: {
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          lock_character: {
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    newConfig
  }: {
    newConfig: UpdateCharacterManagerParamsMsg;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            new_config: newConfig
          }
        })),
        funds: _funds
      })
    };
  };
  updateOwnership = (action: Action, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_ownership: action
        })),
        funds: _funds
      })
    };
  };
}